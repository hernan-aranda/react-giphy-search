{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","categories","className","id","type","value","onChange","target","placeholder","getGifs","category","a","reqUrl","encodeURI","fetch","resp","json","data","gifs","map","img","title","url","images","downsized_medium","GifGridItem","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","role","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yMAOaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkC9C,OACI,uBAAMC,SApBW,SAAEC,GAKnBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAM3BR,GAAe,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC7CN,EAAe,MAMaO,UAAU,mBAA1C,UACI,qBAAKA,UAAU,sBAAf,SACI,sBAAMA,UAAU,mBAAmBC,GAAG,eAAtC,2BAEJ,uBACIC,KAAK,OACLC,MAAQX,EACRY,SAtCc,SAAET,GAOxBF,EAAeE,EAAMU,OAAOF,QAgCpBH,UAAU,eACVM,YAAY,qB,+BC/CfC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACA,mCACbC,EAFa,uDACA,mCADA,cAE+DC,UAAU,IAAD,OAAMH,EAAN,MAFxE,UAEuG,GAFvG,SAGMI,MAAOF,GAHb,cAGbG,EAHa,gBAIMA,EAAKC,OAJX,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHjB,GAAIiB,EAAIjB,GACRkB,MAAOD,EAAIC,OAAS,aACpBC,IAAKF,EAAIG,OAAOC,iBAAiBF,QATtB,kBAaZJ,GAbY,4CAAH,sDCFPO,EAAc,SAAC,GAAoB,IAAlBJ,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACjC,OACI,sBAAKpB,UAAU,4DAAf,UACI,qBAAKwB,IAAMJ,EAAMK,IAAMN,EAAQnB,UAAU,iBACzC,qBAAKA,UAAU,mBAAf,SACI,4BAAG,sBAAMA,UAAU,mCAAhB,SAAqDmB,YCH3DO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAAe,ECOb,SAAEA,GAAe,IAAD,EAEdjB,mBAAS,CAC/BwB,KAAM,GACNY,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAVAC,qBAAW,WACPvB,EAASC,GACJuB,MAAM,SAAAC,GACHH,EAAS,CACLd,KAAMiB,EACNL,SAAS,SAGtB,CAAEnB,IAEEoB,ED1B0BK,CAAczB,GAAlCa,EAFwB,EAE7BN,KAAaY,EAFgB,EAEhBA,QAErB,OACI,sBAAK3B,UAAU,WAAf,UACI,qBAAKA,UAAU,sBAAsBkC,KAAK,QAA1C,SACA,6BAAM1B,MAGJmB,GAAW,qBAAK3B,UAAU,cAAf,SAA6B,qBAAKA,UAAU,6BAA6BkC,KAAK,aAE3F,qBAAKlC,UAAU,eAAf,SACMqB,EAAOJ,KAAK,SAAEC,GAAF,OACV,cAAC,EAAD,eAESA,GADCA,EAAIjB,aEfrBkC,EAAe,WAAM,MAKM5C,mBAAS,IALf,mBAKvBQ,EALuB,KAKXT,EALW,KAO9B,OACI,qCACI,sBAAKU,UAAU,cAAf,UACI,8CAEA,cAAC,EAAD,CAAaV,cAAgBA,OAEjC,8BAKQS,EAAWkB,KAAK,SAAAT,GAAQ,OAAM,cAAC,EAAD,CAASA,SAAWA,GAAiBA,Y,MCjBvF4B,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.7cc08255.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Realizo la desestructuracion de las props directamente\r\n * en los argumentos.\r\n */\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( event ) => {\r\n        /**\r\n         * Cada vez que la persona cambia la caja de texto, se dispara este evento.\r\n         * Actualizamos así el valor de la caja con lo que la persona envió.\r\n         * De esta manera el estado inputValue se encuentra SIEMPRE actualizado dentro\r\n         * del componente, en cualquier lugar que se lo llame\r\n         */\r\n        setInputValue( event.target.value );\r\n    }\r\n\r\n\r\n    const handleSubmit = ( event ) => {\r\n        /**\r\n         * Previene el comportamiento por defecto del formulario,\r\n         * donde se refresca la pantalla.\r\n         */\r\n        event.preventDefault();\r\n\r\n        if( inputValue.trim().length > 2 ) {\r\n            /**\r\n             * No es necesario que envie sus categories a través del prop.\r\n             * Los sets pueden recibir callbacks, por lo cual puedo decirle que\r\n             * al valor que ya posee, le haga spread e incorpore el input.\r\n             */\r\n            setCategories( categories => [inputValue, ...categories] );\r\n            setInputValue( '' );     \r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit } className=\"input-group mb-3\">\r\n            <div className=\"input-group-prepend\">\r\n                <span className=\"input-group-text\" id=\"basic-addon1\">Temática</span>\r\n            </div>\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n                className=\"form-control\"\r\n                placeholder=\"Golden Kamuy\"\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n\r\n","\r\n\r\n\r\n\r\nexport const getGifs = async( category ) => {\r\n    const apiKey     = 'S1RlTg9msfiwoxno1rKcFoQ1tLGhLUwA';\r\n    const reqUrl     = `https://api.giphy.com/v1/gifs/search?api_key=${ apiKey }&q=${ encodeURI(`\"${ category }\"`) }&limit=${ 6 }`;\r\n    const resp       = await fetch( reqUrl );\r\n    const { data }   = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title || 'Sin nombre',\r\n            url: img.images.downsized_medium.url,\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card bg-dark text-white animate__animated animate__fadeIn\">\r\n            <img src={ url } alt={ title } className=\"card-img-top\" />\r\n            <div className=\"card-img-overlay\">\r\n                <p><span className=\"badge badge-secondary card-title\">{ title }</span></p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <div className=\"category\">\r\n            <div className=\"alert alert-success\" role=\"alert\">\r\n            <h2>{ category }</h2>\r\n</div>\r\n\r\n            { loading && <div className=\"text-center\"><div className=\"spinner-border text-danger\" role=\"status\"></div></div> }\r\n\r\n            <div className=\"card-columns\">\r\n                { images.map( ( img ) => \r\n                    <GifGridItem\r\n                        key={ img.id }\r\n                        { ...img }\r\n                    />\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","\r\n/**\r\n * Este es un ejemplo de custom hook. En este caso, este hook posee un estado useState\r\n * donde contiene el valor de si está cargando o ya cargo, y un array con los valores. \r\n * \r\n * Cuando llamo a este hook, el retorno es su propio estado.\r\n */\r\n\r\nimport { getGifs } from \"../helpers/getGifs\";\r\nimport { useState, useEffect } from 'react';\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n    /**\r\n     * Las funciones dentro de useEffect solo se ejecutarán\r\n     * cuando se modifiquen sus dependencias, en este caso,\r\n     * category\r\n     */\r\n    useEffect( () => {\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false,\r\n                });\r\n            });\r\n    }, [ category ]);\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    /**\r\n     * useState es utilizado para setear el estado del componente\r\n     */\r\n    const [categories, setCategories] = useState([])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"text-center\">\r\n                <h1>Giphy Search</h1>\r\n                {/* A traves de los props puedo enviarle de un componente a otro su set para modificar su estado */}\r\n                <AddCategory setCategories={ setCategories } />\r\n            </div>\r\n            <div>\r\n                {\r\n                    /**\r\n                     * El key debe ser unico para cada elemento. Es lo que usa React\r\n                     * para actualizar solo ese componente. No puede ser el indice.*/\r\n                    categories.map( category => ( <GifGrid category={ category } key={ category } /> ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );"],"sourceRoot":""}